  /// \file ElectronicsMapping.h
/*
 *
 * ElectronicsMapping.h header template automatically generated by a class generator
 * Creation date : ven. avr. 8 2016
 *
 * This file is part of DQMSDHCAL libraries.
 * 
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMSDHCAL_ELECTRONICSMAPPING_H
#define DQMSDHCAL_ELECTRONICSMAPPING_H

// -- dqm4hep headers
#include "dqm4hep/DQMElectronicsMapping.h"

#include "Geometry.h"

namespace dqm_sdhcal
{

/** SDHCALElectronicsMapping class
 */ 
class SDHCALElectronicsMapping : public dqm4hep::DQMElectronicsMapping
{
public:
	/** Constructor
	 */
	SDHCALElectronicsMapping();

	/** Destructor
	 */
	~SDHCALElectronicsMapping();

	/** Process conversion from cell ids to electronics ids
	 */
	dqm4hep::StatusCode cellToElectronics( const dqm4hep::DQMElectronicsMapping::Cell &cell, dqm4hep::DQMElectronicsMapping::Electronics &electronics );

	/** Process conversion from dif,asic,channel
	 */
	dqm4hep::StatusCode electronicstoCell( const dqm4hep::DQMElectronicsMapping::Electronics &electronics, dqm4hep::DQMElectronicsMapping::Cell &cell );

	/** Process conversion from position to cell ids
	 */
	dqm4hep::StatusCode positionToCell(const dqm4hep::DQMCartesianVector &position, dqm4hep::DQMElectronicsMapping::Cell &cell);

	/** Process conversion from cell ids to global position
	 */
	dqm4hep::StatusCode cellToPosition(const dqm4hep::DQMElectronicsMapping::Cell &cell, dqm4hep::DQMCartesianVector &position);

	/** Read settings from xml handle
	 */
	dqm4hep::StatusCode readSettings(const dqm4hep::TiXmlHandle xmlHandle);

private:
	/** Find closest layer to positon
	 */
	dqm4hep::StatusCode findClosestLayer(const dqm4hep::DQMCartesianVector &position, unsigned int &layer);

private:
	static const unsigned short m_channelTable[];
	static const unsigned short m_asicTable[];
	static const unsigned short m_channelToIMapping[];
	static const unsigned short m_channelToJMapping[];
	static const unsigned short m_asicToChannelShiftI[];
	static const unsigned short m_asicToChannelShiftJ[];

	Geometry                    m_geometry;
	DifMapping                  m_difMapping;

	dqm4hep::DQMCartesianVector m_cellReferencePosition;
	float                       m_cellSize0;
	float                       m_cellSize1;
	float                       m_layerThickness;
	bool                        m_rotateAxes;

	bool                        m_isInitialized;
	std::string                 m_moduleLogStr;
}; 

} 

#endif  //  DQMSDHCAL_ELECTRONICSMAPPING_H
