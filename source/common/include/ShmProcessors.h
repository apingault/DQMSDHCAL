  /// \file ShmProcessors.h
/*
 *
 * ShmProcessors.h header template automatically generated by a class generator
 * Creation date : jeu. avr. 14 2016
 *
 * This file is part of DQMSDHCAL libraries.
 * 
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMSDHCAL_SHMPROCESSORS_H
#define DQMSDHCAL_SHMPROCESSORS_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMCartesianVector.h"
#include "dqm4hep/DQMElectronicsMapping.h"
#include "dqm4hep/evb/DQMShmProcessor.h"

// -- dqmsdhcal headers
#include "ECalHelper.h"

// -- levbdim headers
#include "buffer.hh"

namespace IMPL { class LCFlagImpl; class CalorimeterHitImpl; }
namespace UTIL { template <typename T> class CellIDEncoder; }
namespace IO { class LCWriter; }

namespace dqm_sdhcal
{

class DIFPtr;

/** EventInfoShmProcessor class
 *  Fill the EVENT::LCEvent parameters
 */
class EventInfoShmProcessor : public dqm4hep::DQMShmProcessor
{
public:
	/** Constructor
	 */
	EventInfoShmProcessor();

	/** Destructor
	 */
	~EventInfoShmProcessor();

	/** Call back function on start of run
	 */
	dqm4hep::StatusCode startOfRun(dqm4hep::DQMRun *const pRun);

	/** Call back function on end of run
	 */
	dqm4hep::StatusCode endOfRun(const dqm4hep::DQMRun *const pRun);

	/** Called when an event is reconstructed.
	 *  The key is a unique identifier for the event.
	 *  The buffer list is the reconstructed list of buffers for the target key
	 *  of the different sources
	 */
	dqm4hep::StatusCode processEvent(dqm4hep::DQMEvent *pEvent, uint32_t key, const std::vector<levbdim::buffer*> &bufferList);

	/** Read settings from xml handle
	 */
	dqm4hep::StatusCode readSettings(const dqm4hep::TiXmlHandle xmlHandle);

private:
	unsigned int                      m_eventNumber;
	unsigned int                      m_runNumber;
	std::string                       m_detectorName;
	std::string                       m_creationTimeParameterName;
	std::string                       m_moduleLogStr;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** SDHCALDifHelper class
 */
class SDHCALDifHelper
{
public:
	/** Create a sdhcal dif pointer from the raw buffer.
	 */
	static DIFPtr *createDIFPtr(levbdim::buffer *pBuffer, unsigned int xdaqShift);

//	/** Create a calorimeter hit from the dif ptr at a target frame and channel
//	 */
//	static IMPL::CalorimeterHitImpl *createCalorimeterHit(DIFPtr *pDifPtr, uint32_t frame, uint32_t channel);

	/** Whether the pad has been fired in the dif
	 */
	static bool isEmptyPad(DIFPtr *pDifPtr, uint32_t frame, uint32_t channel);

	/** Append the dif info at the end of vector
	 */
	static void fillDifTriggerInfo(DIFPtr *pDifPtr, dqm4hep::IntVector &vector);

	/** Fill the lc flag for a sdhcal calorimeter hit collection
	 */
	static void setCaloHitLCFlag(IMPL::LCFlagImpl &lcFlag);
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** SDHCALShmProcessor class
 *  Produce a collection of EVENT::RawCalorimeterHit from the dif raw buffers
 */
class SDHCALShmProcessor : public dqm4hep::DQMShmProcessor
{
	typedef std::set<unsigned int> UIntSet;
public:
	/** Constructor
	 */
	SDHCALShmProcessor();

	/** Destructor
	 */
	~SDHCALShmProcessor();

	/** Call back function on start of run
	 */
	dqm4hep::StatusCode startOfRun(dqm4hep::DQMRun *const pRun);

	/** Call back function on end of run
	 */
	dqm4hep::StatusCode endOfRun(const dqm4hep::DQMRun *const pRun);

	/** Called when an event is reconstructed.
	 *  The key is a unique identifier for the event.
	 *  The buffer list is the reconstructed list of buffers for the target key
	 *  of the different sources
	 */
	dqm4hep::StatusCode processEvent(dqm4hep::DQMEvent *pEvent, uint32_t key, const std::vector<levbdim::buffer*> &bufferList);

	/** Read settings from xml handle
	 */
	dqm4hep::StatusCode readSettings(const dqm4hep::TiXmlHandle xmlHandle);

private:
	/** Create a calorimeter hit from the dif ptr at a target frame and channel
	 */
	IMPL::CalorimeterHitImpl *createCalorimeterHit(UTIL::CellIDEncoder<IMPL::CalorimeterHitImpl> &cellIDEncoder, DIFPtr *pDifPtr, uint32_t frame, uint32_t channel);

private:
	bool                                   m_skipFullAsics;
	bool                                   m_dropFirstRU;
	bool                                   m_encodeDifAsicChannel;
	unsigned int                           m_xdaqShift;
	unsigned int                           m_detectorId;
	unsigned int                           m_noiseLimit;
	unsigned int                           m_amplitudeBitRotation;
	std::string                            m_outputCollectionName;
	dqm4hep::StringVector                  m_ijkEncoding;
	std::string                            m_cellIDEncoderString;
	dqm4hep::StringVector                  m_difAsicChannelEncoding;
	UIntSet                                m_difMaskList;
	dqm4hep::DQMElectronicsMapping        *m_pElectronicsMapping;
	std::string                     	   m_moduleLogStr;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** CherenkovShmProcessor class
 */
class CherenkovShmProcessor : public dqm4hep::DQMShmProcessor
{
public:
	/** Constructor
	 */
	CherenkovShmProcessor();

	/** Destructor
	 */
	~CherenkovShmProcessor();

	/** Call back function on start of run
	 */
	dqm4hep::StatusCode startOfRun(dqm4hep::DQMRun *const pRun);

	/** Call back function on end of run
	 */
	dqm4hep::StatusCode endOfRun(const dqm4hep::DQMRun *const pRun);

	/** Called when an event is reconstructed.
	 *  The key is a unique identifier for the event.
	 *  The buffer list is the reconstructed list of buffers for the target key
	 *  of the different sources
	 */
	dqm4hep::StatusCode processEvent(dqm4hep::DQMEvent *pEvent, uint32_t key, const std::vector<levbdim::buffer*> &bufferList);

	/** Read settings from xml handle
	 */
	dqm4hep::StatusCode readSettings(const dqm4hep::TiXmlHandle xmlHandle);

private:
	/** Create a calorimeter hit from the dif ptr at a target frame and channel
	 */
	IMPL::CalorimeterHitImpl *createCalorimeterHit(DIFPtr *pDifPtr, uint32_t frame, uint32_t channel);

private:
	unsigned int                           m_detectorId;
	unsigned int                           m_xdaqShift;
	unsigned int                           m_cherenkovDifId;
	unsigned int                           m_amplitudeBitRotation;
	int                                    m_cherenkovTimeShift;
	std::string                            m_outputCollectionName;
	std::string                     	   m_moduleLogStr;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** SiWECalHeader struct
 */
struct SiWECalHeader
{
	uint32_t       m_detectorId;
	uint32_t       m_sourceId;
	uint32_t       m_eventId;
	uint64_t       m_bcid;
};

/** SiWECalRawHit struct
 */
struct SiWECalRawHit
{
	uint8_t        m_difId;
	uint8_t        m_asicId;
	uint8_t        m_channelId;
	uint8_t        m_iCell;
	uint8_t        m_jCell;
	uint8_t        m_layer;
	uint8_t        m_columnId; // TODO See with Frederic to add this field in raw data
	float          m_x;
	float          m_y;
	float          m_z;
	uint64_t       m_bcid;     ///< The time frame from trigger time
	uint32_t       m_spillId;  ///< The spill id from SOR
	double         m_recTime;  ///< Reconstructed time (unit seconds)
	uint16_t       m_adcCount;
	double         m_energy;
};

/** SiWECalShmProcessor class
 */
class SiWECalShmProcessor : public dqm4hep::DQMShmProcessor
{
public:
	/** Constructor
	 */
	SiWECalShmProcessor();

	/** Destructor
	 */
	~SiWECalShmProcessor();

	/** Call back function on start of run
	 */
	dqm4hep::StatusCode startOfRun(dqm4hep::DQMRun *const pRun);

	/** Call back function on end of run
	 */
	dqm4hep::StatusCode endOfRun(const dqm4hep::DQMRun *const pRun);

	/** Called when an event is reconstructed.
	 *  The key is a unique identifier for the event.
	 *  The buffer list is the reconstructed list of buffers for the target key
	 *  of the different sources
	 */
	dqm4hep::StatusCode processEvent(dqm4hep::DQMEvent *pEvent, uint32_t key, const std::vector<levbdim::buffer*> &bufferList);

	/** Read settings from xml handle
	 */
	dqm4hep::StatusCode readSettings(const dqm4hep::TiXmlHandle xmlHandle);

	/** Fill the lc flag for a ecal calorimeter hit collection
	 */
	static void setCaloHitLCFlag(IMPL::LCFlagImpl &lcFlag);

	/** Fill the lc flag for a ecal raw calorimeter hit collection
	 */
	static void setRawCaloHitLCFlag(IMPL::LCFlagImpl &lcFlag);

private:
	typedef std::map<unsigned int, std::set<unsigned int> > LayerToAsicListMap;

	std::string                  		   m_moduleLogStr;

	unsigned int                           m_detectorId;
	std::string                            m_outputCollectionName;
	std::string                            m_outputRawCollectionName;
	std::string                            m_cellIDEncoderString;
	dqm4hep::StringVector                  m_ijkEncoding;
	dqm4hep::StringVector                  m_difAsicChannelEncoding;
	dqm4hep::DQMCartesianVector            m_positionShift;
	unsigned int                           m_adcCountCut;
	unsigned int                           m_energyMode;
	bool                                   m_negativeAdcCountSuppression;

	ECalHelper                             m_ecalHelper;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

class FileWriterShmProcessor : public dqm4hep::DQMShmProcessor
{
public:
	/** Constructor
	 */
	FileWriterShmProcessor();

	/** Destructor
	 */
	~FileWriterShmProcessor();

	/** Call back function on start of run
	 */
	dqm4hep::StatusCode startOfRun(dqm4hep::DQMRun *const pRun);

	/** Call back function on end of run
	 */
	dqm4hep::StatusCode endOfRun(const dqm4hep::DQMRun *const pRun);

	/** Called when an event is reconstructed.
	 *  The key is a unique identifier for the event.
	 *  The buffer list is the reconstructed list of buffers for the target key
	 *  of the different sources
	 */
	dqm4hep::StatusCode processEvent(dqm4hep::DQMEvent *pEvent, uint32_t key, const std::vector<levbdim::buffer*> &bufferList);

	/** Read settings from xml handle
	 */
	dqm4hep::StatusCode readSettings(const dqm4hep::TiXmlHandle xmlHandle);

public:
	IO::LCWriter               *m_pLCWriter;

	std::string                 m_fileDirectory;
	std::string                 m_lcioFileName;
	int                         m_openMode;
	int                         m_compressionLevel;
	int                         m_currentRunNumber;
	int                         m_currentSubRunNumber;
};

} 

#endif  //  DQMSDHCAL_SHMPROCESSORS_H
