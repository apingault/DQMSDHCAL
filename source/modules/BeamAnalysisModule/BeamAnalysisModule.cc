/// \file BeamAnalysisModule.cc
/*
 *
 * BeamAnalysisModule.cc source template automatically generated by a class generator
 * Creation date : ven. aoï¿½t 28 2015
 *
 * This file is part of DQMSDHCAL libraries.
 *
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete, Arnaud Steen
 * @copyright CNRS , IPNL
 */

#include "BeamAnalysisModule.h"

// -- dqm4hep headers
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMEvent.h"
#include "dqm4hep/DQMXmlHelper.h"
#include "dqm4hep/DQMModuleApi.h"
#include "dqm4hep/DQMPluginManager.h"
#include "dqm4hep/DQMLogging.h"


// -- std headers
#include <math.h>

//-- lcio headers
#include <EVENT/LCCollection.h>
#include <IMPL/CalorimeterHitImpl.h>

using namespace dqm4hep;

namespace dqm_sdhcal
{

// plugin declaration
DQM_PLUGIN_DECL( BeamAnalysisModule, "BeamAnalysisModule" )

BeamAnalysisModule::BeamAnalysisModule() :
  DQMAnalysisModule(),
  m_pEventHelper(NULL),
  m_nEventProcessed(0),
  m_DAQ_BC_Period(0),
  m_nParticleLastSpill(0),
  m_skipEvent(0),
  m_newSpillTimeCut(0)
{
}

//-------------------------------------------------------------------------------------------------
BeamAnalysisModule::~BeamAnalysisModule()
{
}

//-------------------------------------------------------------------------------------------------
dqm4hep::StatusCode BeamAnalysisModule::initModule()
{
  m_moduleLogStr = "[BeamAnalysisModule]";
  return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------
dqm4hep::StatusCode BeamAnalysisModule::readSettings(const dqm4hep::TiXmlHandle xmlHandle)
{
  /*------ Event Helper settings ------*/
  dqm4hep::TiXmlElement *pEventHelperElement = xmlHandle.FirstChild("eventHelper").Element();
  if ( ! pEventHelperElement )
  {
    LOG4CXX_ERROR( dqm4hep::dqmMainLogger , "Couldn't find xml element eventHelper !" );
    return dqm4hep::STATUS_CODE_NOT_FOUND;
  }

  std::string plugin;
  RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::getAttribute(pEventHelperElement, "plugin", plugin));

  m_pEventHelper = dqm4hep::DQMPluginManager::instance()->createPluginClass<EventHelper>(plugin);

  if ( ! m_pEventHelper )
  {
    LOG4CXX_ERROR( dqm4hep::dqmMainLogger , "Couldn't find eventHelper plugin called : " << plugin );
    return dqm4hep::STATUS_CODE_NOT_FOUND;
  }
  RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, m_pEventHelper->readSettings(dqm4hep::TiXmlHandle(pEventHelperElement)));
  /*------ Event Helper settings ------*/


  /* ------ Booking Monitor Elements ------ */
  // ------ General ME ------
  RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TimeDiffSpill", m_pTimeDiffSpill));
  RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TimeDiffTrigger", m_pTimeDiffTrigger));
  RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::bookMonitorElement(this, xmlHandle, "SpillLength", m_pSpillLength));
  RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TriggerPerSpill", m_pTriggerPerSpill));
  RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::bookMonitorElement(this, xmlHandle, "TriggerLastSpill", m_pTriggerLastSpill));

  RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::bookMonitorElement(this, xmlHandle, "AcquisitionTime", m_pAcquisitionTime));
  /* ------ End Booking Monitor Elements ------ */
  LOG4CXX_DEBUG( dqm4hep::dqmMainLogger , m_moduleLogStr << " - Finished booking ME ");


  // Print Monitor Elements tree structure
  RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMModuleApi::cd(this, "/"));
  dqm4hep::DQMModuleApi::ls(this, true);

  /* ------ Analysis Settings ------ */
  m_inputCollectionName = "SDHCAL_HIT";
  RETURN_RESULT_IF_AND_IF(dqm4hep::STATUS_CODE_SUCCESS, dqm4hep::STATUS_CODE_NOT_FOUND, !=, dqm4hep::DQMXmlHelper::readParameterValue(xmlHandle,
                          "InputCollectionName", m_inputCollectionName));

  m_skipEvent = 0; //=1 to skip first event of the acquisition
  RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::readParameterValue(xmlHandle,
                   "NumberOfEventToSkip", m_skipEvent));

  return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------
dqm4hep::StatusCode BeamAnalysisModule::processEvent(dqm4hep::DQMEvent * const pEvent)
{
  EVENT::LCEvent *pLCEvent = pEvent->getEvent<EVENT::LCEvent>();

  if (NULL == pLCEvent)
  {
    LOG4CXX_WARN( dqm4hep::dqmMainLogger , m_moduleLogStr << " - pLCEvent is NULL! ");
    return dqm4hep::STATUS_CODE_FAILURE;
  }

  if (pLCEvent->getEventNumber() <= m_skipEvent)
  {
    LOG4CXX_WARN( dqm4hep::dqmMainLogger , m_moduleLogStr << " - Skipping Trigger Event " << pLCEvent->getEventNumber() << " ... skipEvent parameter: " << m_skipEvent );
    return dqm4hep::STATUS_CODE_SUCCESS;
  }

  LOG4CXX_INFO( dqm4hep::dqmMainLogger , m_moduleLogStr << " - Processing Trigger event no " << pLCEvent->getEventNumber() << " runNumber no " << pLCEvent->getRunNumber() << " ..." );
  LOG4CXX_DEBUG( dqm4hep::dqmMainLogger , m_moduleLogStr << " - Time Stamp: " << pLCEvent->getTimeStamp() );

  try
  {
    EVENT::LCCollection *pCalorimeterHitCollection = pLCEvent->getCollection(m_inputCollectionName);
    if (NULL == pCalorimeterHitCollection)
    {
      LOG4CXX_ERROR( dqm4hep::dqmMainLogger , m_moduleLogStr << " NULL Pointer: pCalorimeterHitCollection pointer " );
      return dqm4hep::STATUS_CODE_SUCCESS;
    }
    LOG4CXX_DEBUG( dqm4hep::dqmMainLogger , m_moduleLogStr << " NumberOfHits in trigger : " << pCalorimeterHitCollection->getNumberOfElements() );
    
    //Find Triggers and NewSpill
    RETURN_RESULT_IF( dqm4hep::STATUS_CODE_SUCCESS, !=, m_pEventHelper->findTrigger(pCalorimeterHitCollection, m_eventParameters));

    m_DAQ_BC_Period = m_pEventHelper->getDAQ_BC_Period();
    
    // Fill Spill infos
    if ( m_eventParameters.nTriggerInSpill == 1 )
    {  
      m_pSpillLength->get<TH1>()->Fill((m_eventParameters.lastSpillIntegratedTime) * m_DAQ_BC_Period );
      LOG4CXX_DEBUG( dqm4hep::dqmMainLogger , m_moduleLogStr << " - lastSpillIntegratedTime" << (m_eventParameters.lastSpillIntegratedTime) * m_DAQ_BC_Period  );
      LOG4CXX_DEBUG( dqm4hep::dqmMainLogger , m_moduleLogStr << " - m_totalIntegratedTime - lastSpillIntegratedTime" << (m_eventParameters.totalIntegratedTime - m_eventParameters.spillIntegratedTime) * m_DAQ_BC_Period);
      m_pTimeDiffSpill->get<TH1>()->Fill((m_eventParameters.timeSpill - m_eventParameters.timeLastSpill) * m_DAQ_BC_Period);
      m_pTriggerLastSpill->get<dqm4hep::TScalarString>()->Set(std::to_string(m_eventParameters.nTriggerLastSpill));
      m_pTriggerPerSpill->get<TH1>()->Fill(m_eventParameters.nTriggerLastSpill);
    }
    
    // Fill Trigger info
     m_pAcquisitionTime->get<TH1F>()->Fill((m_eventParameters.eventIntegratedTime * m_DAQ_BC_Period));
 
    LOG4CXX_DEBUG( dqm4hep::dqmMainLogger , m_moduleLogStr << " - eventIntegratedTime (s): " << m_eventParameters.eventIntegratedTime * m_DAQ_BC_Period << "s\t spillIntegratedTime (s): " << m_eventParameters.spillIntegratedTime * m_DAQ_BC_Period << "s\t totalIntegratedTime (s) : " << m_eventParameters.totalIntegratedTime * m_DAQ_BC_Period << "s");
  }
  catch (EVENT::DataNotAvailableException &exception)
  {
    LOG4CXX_ERROR( dqm4hep::dqmMainLogger , m_moduleLogStr << " - Caught EVENT::DataNotAvailableException : " << exception.what() );
    LOG4CXX_ERROR( dqm4hep::dqmMainLogger , m_moduleLogStr << " - Available Collections : ");
    for (uint32_t iCol =0; iCol< pLCEvent->getCollectionNames()->size(); ++iCol)
      LOG4CXX_ERROR( dqm4hep::dqmMainLogger, m_moduleLogStr <<  "\t\t - '" << pLCEvent->getCollectionNames()->at( iCol ) << "'" );

    LOG4CXX_ERROR( dqm4hep::dqmMainLogger , m_moduleLogStr << " - Skipping event" );
    return dqm4hep::STATUS_CODE_SUCCESS;
  }
  catch (...)
  {
    LOG4CXX_ERROR( dqm4hep::dqmMainLogger , m_moduleLogStr << " Caught unknown exception !");
    return dqm4hep::STATUS_CODE_FAILURE;
  }
  m_eventParameters.nTriggerProcessed++;
  return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------
dqm4hep::StatusCode BeamAnalysisModule::startOfCycle()
{
  // this->resetElements();
  return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode BeamAnalysisModule::endOfCycle()
{
  return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode BeamAnalysisModule::startOfRun(dqm4hep::DQMRun * const pRun)
{
  m_eventParameters.nTriggerProcessed = 0;
  m_eventParameters.eventIntegratedTime = 0;
  m_eventParameters.spillIntegratedTime = 0;
  m_eventParameters.totalIntegratedTime = 0;
  m_eventParameters.timeLastTrigger = 0;
  m_eventParameters.timeLastSpill = 0;
  m_eventParameters.nTriggerInSpill = 0;
    return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode BeamAnalysisModule::endOfRun(dqm4hep::DQMRun * const pRun)
{
  LOG4CXX_DEBUG( dqm4hep::dqmMainLogger , m_moduleLogStr << " Run lasted " << m_eventParameters.totalIntegratedTime * m_DAQ_BC_Period << "s : " << floor(m_eventParameters.totalIntegratedTime * m_DAQ_BC_Period / 3600) << "h " << floor(fmod(m_eventParameters.totalIntegratedTime * m_DAQ_BC_Period / 60, 60)) << "min " << fmod(m_eventParameters.totalIntegratedTime * m_DAQ_BC_Period, 60) <<  "s");
  return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------
dqm4hep::StatusCode BeamAnalysisModule::endModule()
{
  return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------
void BeamAnalysisModule::resetElements()
{
  m_pTimeDiffSpill->reset();
  m_pTimeDiffTrigger->reset();
  m_pSpillLength->reset();
  m_pAcquisitionTime->reset();
}

}
