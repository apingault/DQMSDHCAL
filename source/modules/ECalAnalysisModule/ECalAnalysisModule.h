/// \file ECalAnalysisModule.h
/*
 *
 * ECalAnalysisModule.h header template automatically generated by a class generator
 * Creation date : ven. aoï¿½t 28 2015
 *
 * This file is part of DQMSDHCAL libraries.
 *
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMSDHCAL_ECALANALYSISMODULE_H
#define DQMSDHCAL_ECALANALYSISMODULE_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

// -- lcio headers
#include "lcio.h"
#include "EVENT/CalorimeterHit.h"

// -- calo software headers
#include "Algorithm/Cluster.h"
#include "CaloObject/CaloHit.h"
#include "Algorithm/ClusteringHelper.h"

// -- std headers
#include <string>
#include <cstring>
#include <vector>

// -- dqmsdhcal headers
#include "DQMTriventModule.h"
#include "AnalysisTools.h"

namespace caloobject
{
typedef std::map<unsigned int, std::vector<CaloHit *> > CaloHitMap;
typedef std::vector<CaloHit *> CaloHitList;
typedef std::vector<CaloCluster *> CaloClusterList;
}

namespace dqm_sdhcal
{

class EventClassifier;
class EventHelper;
/** ECalAnalysisModule class
 */
class ECalAnalysisModule : public DQMTriventModule
{
public:
	/** Constructor
	 */
	ECalAnalysisModule();

	/** Destructor
	 */
	virtual ~ECalAnalysisModule();

	dqm4hep::StatusCode userInitModule();
	dqm4hep::StatusCode userReadSettings(const dqm4hep::TiXmlHandle xmlHandle);
	dqm4hep::StatusCode processEvent(EVENT::LCEvent *pLCEvent);

	dqm4hep::StatusCode startOfCycle();
	dqm4hep::StatusCode endOfCycle();
	dqm4hep::StatusCode startOfRun(dqm4hep::DQMRun *const pRun);
	dqm4hep::StatusCode endOfRun(dqm4hep::DQMRun *const pRun);
	dqm4hep::StatusCode endModule();

private:
	// module parameters
	std::string 							 m_moduleLogStr;
	std::string                              m_inputCollectionName;
	std::string                              m_cellIDDecoderString;
	unsigned int                             m_nActiveLayers;

	// monitor elements
	dqm4hep::DQMMonitorElementPtr			 m_pNHitDistribution;
	dqm4hep::DQMMonitorElementPtr			 m_pAdcCountDistribution;
	dqm4hep::DQMMonitorElementPtr			 m_pTotalEnergyDistribution;
	dqm4hep::DQMMonitorElementPtr			 m_pHitEnergyDistribution;
	dqm4hep::DQMMonitorElementPtr			 m_pNHitFromSOA;
	dqm4hep::DQMMonitorElementPtr			 m_pNHitFromSOS;

	struct LayerElements
	{
		dqm4hep::DQMMonitorElementPtr			m_pNHit;
		dqm4hep::DQMMonitorElementPtr			m_pEnergy;
		dqm4hep::DQMMonitorElementPtr			m_pHitMap;
		dqm4hep::DQMMonitorElementPtr			m_pEnergyMap;
	};

	std::map<unsigned int, LayerElements>       m_layerElementMap;
};

}

#endif  //  DQMSDHCAL_ECALANALYSISMODULE_H
